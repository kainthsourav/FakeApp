name: Build, Publish, and Deploy

on:
  push:
    branches:
      - feature/**
      - develop
      - release/**
      - hotfix/*
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (e.g., development, staging, production)'
        required: false

jobs:
  clean-project:
    name: Clean Project
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.5
        with:
          fetch-depth: 0
        
      - name: Clean Project
        run: dotnet clean FakeApp.sln

  restore-dependencies:
    name: Restore Dependencies
    needs: clean-project
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.5
        with:
          fetch-depth: 0

      - name: Restore Dependencies
        run: dotnet restore FakeApp.sln

  build-solution:
    name: Build Solution
    needs: restore-dependencies
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.5
        with:
          fetch-depth: 0

      - name: Build Solution
        run: |
          dotnet build FakeApp.sln --configuration Release

  publish-artifact:
    name: Publish Artifact
    needs: build-solution
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.5
        with:
          fetch-depth: 0
        
      - name: Publish Artifact
        run: |
          dotnet publish FakeApp.sln -c Release -o ./publish

      - name: Archive Artifact
        uses: actions/upload-artifact@v4.3.3
        with:
          name: FakeApp-Artifact
          path: ./publish

  deploy-to-ec2:
    name: Deploy to EC2
    needs: publish-artifact
    runs-on: windows-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment != null }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: FakeApp-Artifact
          path: ./downloaded-artifact

      - name: Install WinRM
        run: |
          winrm quickconfig -q
          winrm set winrm/config/winrs @{MaxMemoryPerShellMB="300"}
          winrm set winrm/config '@{MaxTimeoutms="1800000"}'
          winrm set winrm/config/service '@{AllowUnencrypted="true"}'
          winrm set winrm/config/service/auth '@{Basic="true"}'
          winrm set winrm/config/service/auth '@{CredSSP="true"}'
          winrm set winrm/config/client/auth '@{CredSSP="true"}'

      - name: Copy Artifact
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets['EC2_HOST_' + github.event.inputs.environment] }}
          username: ${{ secrets['EC2_USERNAME_' + github.event.inputs.environment] }}
          key: ${{ secrets['SSH_PRIVATE_KEY_' + github.event.inputs.environment] }}
          source: "./downloaded-artifact/*"
          target: "C:\\inetpub\\wwwroot\\FakeApp"

      - name: Execute Remote Command
        uses: appleboy/psexec-action@master
        with:
          host: ${{ secrets['EC2_HOST_' + github.event.inputs.environment] }}
          username: ${{ secrets['EC2_USERNAME_' + github.event.inputs.environment] }}
          password: ${{ secrets['EC2_PASSWORD_' + github.event.inputs.environment] }}
          script: |
            net stop YourApp
            net start YourApp

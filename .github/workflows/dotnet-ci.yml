name: Build .NET Solution

on:
  push:
    branches:
      - feature/**
      - develop
      - release/**
      - hotfix/*
  workflow_dispatch:

jobs:
  Set-Version:
    name: Set-Version 
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.5
        with:
          fetch-depth: 0

      - name: Generate New Version
        id: generate_version
        run: |
          echo "::set-output name=new_version::1.0.$(((${GITHUB_RUN_NUMBER:-0} - 1) % 10000))"

  clean-project:
    name: Clean Project
    needs: Set-Version
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.5
        with:
          fetch-depth: 0
        
      - name: Clean Project
        run: dotnet clean FakeApp.sln
        
  Restore-Dependencies:
    name: Restore Dependencies
    needs: clean-project
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.5
        with:
          fetch-depth: 0

      - name: Restore Dependencies
        run: |
          dotnet restore FakeApp.sln

  Build-Solution:
    name: Build Solution
    needs: Restore-Dependencies
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.5
        with:
          fetch-depth: 0

      - name: Update AssemblyInfo.cs
        run: |
          lastVersion=${{ needs.version.outputs.new_version }}
          fileContent=$(<AssemblyInfo.cs)
          parts=(${fileContent//\(/ }) # Split by "("
          old="${parts[-2]}(${parts[-1]}"
          new="${parts[-2]}('${lastVersion}')"
          echo "$old >> $new"
          newFileContent=${fileContent//$old/$new}
          echo "$newFileContent" > AssemblyInfo.cs
          cat AssemblyInfo.cs
          shell: pwsh

      - name: Build Solution
        run: |
          dotnet build FakeApp.sln --configuration Release /p:Version=${{ steps.generate_version.outputs.new_version }}

  Publish-Artifact:
    name: Publish Artifact
    needs: Build-Solution
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.5
        with:
          fetch-depth: 0
        
      - name: Publish Artifact
        run: |
          dotnet publish FakeApp.sln -c Release -o ./publish /p:Version=${{ steps.generate_version.outputs.new_version }}

      - name: Archive Artifact
        uses: actions/upload-artifact@v4.3.3
        with:
          name: FakeApp-${{ steps.generate_version.outputs.new_version }}
          path: ./publish

  show-artifact:
    name: Show Artifact
    needs: Publish-Artifact
    runs-on: windows-latest

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: FakeApp-${{ steps.generate_version.outputs.new_version }}
          path: ./downloaded-artifact

      - name: List Files
        run: ls ./downloaded-artifact

      - name: Provide Artifact Link
        run: |
          echo "Artifact download link: ${{ steps.download-artifact.outputs.artifact_url }}"
